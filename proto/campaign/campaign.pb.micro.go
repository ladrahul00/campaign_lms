// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/campaign/campaign.proto

package go_micro_service_campaign

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Campaign service

func NewCampaignEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Campaign service

type CampaignService interface {
	Create(ctx context.Context, in *NewCampaignRequest, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *CampaignByIdRequest, opts ...client.CallOption) (*CampaignResponse, error)
	GetByTag(ctx context.Context, in *CampaignByTagRequest, opts ...client.CallOption) (*CampaignResponse, error)
}

type campaignService struct {
	c    client.Client
	name string
}

func NewCampaignService(name string, c client.Client) CampaignService {
	return &campaignService{
		c:    c,
		name: name,
	}
}

func (c *campaignService) Create(ctx context.Context, in *NewCampaignRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Campaign.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignService) Get(ctx context.Context, in *CampaignByIdRequest, opts ...client.CallOption) (*CampaignResponse, error) {
	req := c.c.NewRequest(c.name, "Campaign.Get", in)
	out := new(CampaignResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignService) GetByTag(ctx context.Context, in *CampaignByTagRequest, opts ...client.CallOption) (*CampaignResponse, error) {
	req := c.c.NewRequest(c.name, "Campaign.GetByTag", in)
	out := new(CampaignResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Campaign service

type CampaignHandler interface {
	Create(context.Context, *NewCampaignRequest, *Response) error
	Get(context.Context, *CampaignByIdRequest, *CampaignResponse) error
	GetByTag(context.Context, *CampaignByTagRequest, *CampaignResponse) error
}

func RegisterCampaignHandler(s server.Server, hdlr CampaignHandler, opts ...server.HandlerOption) error {
	type campaign interface {
		Create(ctx context.Context, in *NewCampaignRequest, out *Response) error
		Get(ctx context.Context, in *CampaignByIdRequest, out *CampaignResponse) error
		GetByTag(ctx context.Context, in *CampaignByTagRequest, out *CampaignResponse) error
	}
	type Campaign struct {
		campaign
	}
	h := &campaignHandler{hdlr}
	return s.Handle(s.NewHandler(&Campaign{h}, opts...))
}

type campaignHandler struct {
	CampaignHandler
}

func (h *campaignHandler) Create(ctx context.Context, in *NewCampaignRequest, out *Response) error {
	return h.CampaignHandler.Create(ctx, in, out)
}

func (h *campaignHandler) Get(ctx context.Context, in *CampaignByIdRequest, out *CampaignResponse) error {
	return h.CampaignHandler.Get(ctx, in, out)
}

func (h *campaignHandler) GetByTag(ctx context.Context, in *CampaignByTagRequest, out *CampaignResponse) error {
	return h.CampaignHandler.GetByTag(ctx, in, out)
}
